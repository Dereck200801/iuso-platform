-- Script de diagnostic pour la base de donn√©es IUSO-SNE
-- Ce script v√©rifie l'√©tat actuel des tables et configurations

-- 1. V√©rifier si la table inscrits existe
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'inscrits')
        THEN '‚úÖ Table inscrits existe'
        ELSE '‚ùå Table inscrits n''existe pas'
    END as table_status;

-- 2. V√©rifier la structure de la table inscrits
SELECT 
    'üìã Structure de la table inscrits:' as info;

SELECT 
    column_name as "Colonne",
    data_type as "Type",
    is_nullable as "Nullable",
    column_default as "D√©faut"
FROM information_schema.columns 
WHERE table_name = 'inscrits' 
ORDER BY ordinal_position;

-- 3. V√©rifier les contraintes de cl√© √©trang√®re
SELECT 
    'üîó Contraintes de cl√© √©trang√®re:' as info;

SELECT 
    tc.constraint_name as "Contrainte",
    tc.table_name as "Table",
    kcu.column_name as "Colonne",
    ccu.table_name as "Table_r√©f√©renc√©e",
    ccu.column_name as "Colonne_r√©f√©renc√©e"
FROM information_schema.table_constraints tc
JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name
JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name
WHERE tc.constraint_type = 'FOREIGN KEY' 
AND tc.table_name = 'inscrits';

-- 4. V√©rifier les index
SELECT 
    'üìä Index sur la table inscrits:' as info;

SELECT 
    indexname as "Index",
    indexdef as "D√©finition"
FROM pg_indexes 
WHERE tablename = 'inscrits';

-- 5. V√©rifier les politiques RLS
SELECT 
    'üîí Politiques RLS:' as info;

SELECT 
    schemaname as "Sch√©ma",
    tablename as "Table",
    policyname as "Politique",
    permissive as "Permissive",
    roles as "R√¥les",
    cmd as "Commande",
    qual as "Condition"
FROM pg_policies 
WHERE tablename = 'inscrits';

-- 6. V√©rifier si RLS est activ√©
SELECT 
    CASE 
        WHEN relrowsecurity 
        THEN '‚úÖ RLS activ√© sur la table inscrits'
        ELSE '‚ùå RLS non activ√© sur la table inscrits'
    END as rls_status
FROM pg_class 
WHERE relname = 'inscrits';

-- 7. V√©rifier les fonctions cr√©√©es
SELECT 
    '‚öôÔ∏è Fonctions personnalis√©es:' as info;

SELECT 
    routine_name as "Fonction",
    routine_type as "Type",
    data_type as "Type_retour"
FROM information_schema.routines 
WHERE routine_name IN ('generate_numero_dossier', 'set_numero_dossier', 'update_updated_at_column')
ORDER BY routine_name;

-- 8. V√©rifier les triggers
SELECT 
    'üîÑ Triggers:' as info;

SELECT 
    trigger_name as "Trigger",
    event_manipulation as "√âv√©nement",
    action_timing as "Timing",
    action_statement as "Action"
FROM information_schema.triggers 
WHERE event_object_table = 'inscrits';

-- 9. V√©rifier le bucket storage
SELECT 
    'üìÅ Buckets de storage:' as info;

SELECT 
    id as "ID",
    name as "Nom",
    public as "Public",
    created_at as "Cr√©√©_le"
FROM storage.buckets 
WHERE id = 'pieces-candidats';

-- 10. V√©rifier les donn√©es existantes
SELECT 
    'üìà Statistiques des donn√©es:' as info;

SELECT 
    COUNT(*) as "Total_inscriptions",
    COUNT(CASE WHEN user_id IS NOT NULL THEN 1 END) as "Avec_user_id",
    COUNT(CASE WHEN user_id IS NULL THEN 1 END) as "Sans_user_id",
    COUNT(CASE WHEN email IS NOT NULL AND email != '' THEN 1 END) as "Avec_email",
    COUNT(CASE WHEN numero_dossier IS NOT NULL THEN 1 END) as "Avec_numero_dossier"
FROM inscrits;

-- 11. V√©rifier les utilisateurs auth
SELECT 
    'üë• Utilisateurs dans auth.users:' as info;

SELECT 
    COUNT(*) as "Total_users",
    COUNT(CASE WHEN email_confirmed_at IS NOT NULL THEN 1 END) as "Emails_confirm√©s",
    COUNT(CASE WHEN email_confirmed_at IS NULL THEN 1 END) as "Emails_non_confirm√©s"
FROM auth.users;

-- 12. R√©sum√© du diagnostic
SELECT 
    'üèÅ R√âSUM√â DU DIAGNOSTIC:' as titre;

SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'inscrits' AND column_name = 'user_id')
        THEN '‚úÖ Colonne user_id pr√©sente'
        ELSE '‚ùå Colonne user_id manquante - EX√âCUTER fix-inscrits-table-user-id.sql'
    END as user_id_status,
    
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE table_name = 'inscrits' AND constraint_type = 'FOREIGN KEY')
        THEN '‚úÖ Contraintes de cl√© √©trang√®re pr√©sentes'
        ELSE '‚ö†Ô∏è Contraintes de cl√© √©trang√®re manquantes'
    END as foreign_key_status,
    
    CASE 
        WHEN EXISTS (SELECT 1 FROM pg_class WHERE relname = 'inscrits' AND relrowsecurity = true)
        THEN '‚úÖ RLS activ√©'
        ELSE '‚ùå RLS non activ√©'
    END as rls_status,
    
    CASE 
        WHEN EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'pieces-candidats')
        THEN '‚úÖ Bucket storage configur√©'
        ELSE '‚ùå Bucket storage manquant'
    END as storage_status; 