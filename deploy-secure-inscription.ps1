param(
    [switch]$SkipBuild,
    [switch]$LocalOnly,
    [string]$DatabaseUrl
)

Write-Host "üîí D√©ploiement du syst√®me d'inscription s√©curis√©" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan

# Fonction pour afficher les erreurs
function Write-Error-Message {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

# Fonction pour afficher les succ√®s
function Write-Success-Message {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

# Fonction pour afficher les avertissements
function Write-Warning-Message {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è $Message" -ForegroundColor Yellow
}

# V√©rification des pr√©requis
Write-Host ""
Write-Host "üîç V√©rification des pr√©requis..." -ForegroundColor Blue

# V√©rifier Supabase CLI
try {
    $supabaseVersion = supabase --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success-Message "Supabase CLI trouv√©: $supabaseVersion"
    } else {
        throw "Supabase CLI non trouv√©"
    }
} catch {
    Write-Error-Message "Supabase CLI non trouv√©. Installez-le avec: npm install -g supabase"
    exit 1
}

# V√©rifier la configuration Supabase
if (Test-Path "supabase/config.toml") {
    Write-Success-Message "Configuration Supabase trouv√©e"
} else {
    Write-Error-Message "Configuration Supabase non trouv√©e. Initialisez avec: supabase init"
    exit 1
}

# V√©rifier Node.js et npm
try {
    $nodeVersion = node --version 2>$null
    $npmVersion = npm --version 2>$null
    Write-Success-Message "Node.js: $nodeVersion, npm: $npmVersion"
} catch {
    Write-Error-Message "Node.js ou npm non trouv√©"
    exit 1
}

# √âtape 1: D√©ployer la fonction Edge
Write-Host ""
Write-Host "üì¶ √âtape 1/3: D√©ploiement de la fonction Edge auth-rollback..." -ForegroundColor Blue

try {
    if (-not $LocalOnly) {
        supabase functions deploy auth-rollback
        if ($LASTEXITCODE -eq 0) {
            Write-Success-Message "Fonction Edge d√©ploy√©e avec succ√®s"
        } else {
            throw "√âchec du d√©ploiement de la fonction Edge"
        }
    } else {
        Write-Warning-Message "D√©ploiement local uniquement - fonction Edge ignor√©e"
    }
} catch {
    Write-Error-Message "√âchec du d√©ploiement de la fonction Edge: $($_.Exception.Message)"
    Write-Host "üí° Essayez de vous connecter avec: supabase login" -ForegroundColor Yellow
    exit 1
}

# √âtape 2: Cr√©er la table orphaned_auth_accounts
Write-Host ""
Write-Host "üóÑÔ∏è √âtape 2/3: Cr√©ation de la table orphaned_auth_accounts..." -ForegroundColor Blue

if (Test-Path "create-orphaned-accounts-table.sql") {
    Write-Host "üìù Fichier SQL trouv√©: create-orphaned-accounts-table.sql"
    
    if ($DatabaseUrl) {
        try {
            # Utiliser psql si disponible
            $psqlCommand = "psql `"$DatabaseUrl`" -f create-orphaned-accounts-table.sql"
            Invoke-Expression $psqlCommand
            Write-Success-Message "Table cr√©√©e via psql"
        } catch {
            Write-Warning-Message "√âchec de l'ex√©cution via psql. Ex√©cutez manuellement le fichier SQL."
        }
    } else {
        Write-Warning-Message "URL de base de donn√©es non fournie."
        Write-Host "üí° Ex√©cutez manuellement create-orphaned-accounts-table.sql dans votre console Supabase" -ForegroundColor Yellow
        Write-Host "   ou utilisez: .\deploy-secure-inscription.ps1 -DatabaseUrl 'votre-url-db'" -ForegroundColor Yellow
    }
} else {
    Write-Error-Message "Fichier create-orphaned-accounts-table.sql non trouv√©"
    exit 1
}

# √âtape 3: Build du projet
if (-not $SkipBuild) {
    Write-Host ""
    Write-Host "üî® √âtape 3/3: Build du projet..." -ForegroundColor Blue
    
    try {
        npm run build
        if ($LASTEXITCODE -eq 0) {
            Write-Success-Message "Build r√©ussie"
        } else {
            throw "√âchec de la build"
        }
    } catch {
        Write-Error-Message "√âchec de la build: $($_.Exception.Message)"
        exit 1
    }
} else {
    Write-Warning-Message "Build ignor√©e (param√®tre -SkipBuild)"
}

# Messages finaux
Write-Host ""
Write-Host "üéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS !" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green
Write-Host ""

Write-Host "üìù Actions √† effectuer manuellement:" -ForegroundColor Cyan
Write-Host ""
Write-Host "1. Si pas d√©j√† fait, ex√©cutez le script SQL dans Supabase:" -ForegroundColor White
Write-Host "   create-orphaned-accounts-table.sql" -ForegroundColor Yellow
Write-Host ""
Write-Host "2. Configurez les variables d'environnement de la fonction Edge:" -ForegroundColor White
Write-Host "   - SUPABASE_URL" -ForegroundColor Yellow
Write-Host "   - SUPABASE_SERVICE_ROLE_KEY" -ForegroundColor Yellow
Write-Host ""
Write-Host "3. Testez le nouveau syst√®me d'inscription" -ForegroundColor White
Write-Host ""
Write-Host "üìñ Consultez GUIDE-INSCRIPTION-SECURISEE.md pour plus de d√©tails" -ForegroundColor Cyan

# Statistiques finales
Write-Host ""
Write-Host "üìä Statistiques du d√©ploiement:" -ForegroundColor Magenta
Write-Host "- Fonction Edge: $(if ($LocalOnly) { 'Ignor√©e' } else { 'D√©ploy√©e' })" -ForegroundColor White
Write-Host "- Table SQL: $(if ($DatabaseUrl) { 'Cr√©√©e automatiquement' } else { '√Ä cr√©er manuellement' })" -ForegroundColor White
Write-Host "- Build projet: $(if ($SkipBuild) { 'Ignor√©e' } else { 'R√©ussie' })" -ForegroundColor White

Write-Host ""
Write-Host "‚ú® Syst√®me d'inscription s√©curis√© pr√™t √† l'emploi !" -ForegroundColor Green 